import logging
import argparse
import requests
import sqlite3
import os
import hashlib
import pprint
import re


CREATE_DORKS_TABLE = '''CREATE TABLE IF NOT EXISTS Dorks(
    DORK_SHA256 TEXT,
    DATE_ADDED DATE,
    DORK TEXT,
    CATEGORY TEXT,
    AUTHOR TEXT
);'''


class DB:
    def __init__(self, dbfilename='data.db'):
        """
        Constructor: initial setup for the class including default scripts, connection
        @param dbfilename: filename for database
        @return: class instance
        """
        logging.debug('Instance of DBAccess class was created.')
        self.dbfilename = dbfilename
        self.connection = None

        if not self.is_database_file():
            self.create_new_database()

        self.get_database_connection()


    def __del__(self):
        """
        Destructor: closes connection to database
        """
        logging.debug('Instance of DBAccess class was destroyed.')
        if type(self.connection) == sqlite3.Connection:
            self.connection.close()

    def is_database_file(self):
        """
        Checks if database file exists
        @return: True if exists, false otherwise
        """
        logging.debug(f'Check if database file {self.dbfilename} is on disk.')
        if os.path.isfile(self.dbfilename):
            return True
        return False


    def get_database_connection(self):
        """
        Get connection and cursor for current database
        """
        logging.debug('Establish database connection.')
        try:
            self.connection = sqlite3.connect(self.dbfilename)
            self.cursor = self.connection.cursor()
            return
        except sqlite3.Error as e:
            logging.error(f'Error: Could not connect to the DB: {e}')

        except Exception as e:
            logging.error(f'Error: Could not connect to the DB: {e}')

        exit('Error occurred when connecting to DB. Read the log file')

    def create_new_database(self):
        """
        Creates new database and tables
        @return: True if successful, exits the entire script otherwise
        """
        logging.info('Creating new tables in database.')
        self.get_database_connection()

        try:
            self.cursor.execute(CREATE_DORKS_TABLE)
            return True
        except sqlite3.Error as e:
            logging.error(f'ERROR Creating new DB - Database error: {e}')
        except Exception as e:
            logging.error(f'ERROR Creating new DB: {e}')

        exit('Error occurred when creating new DB. Read the log file')


    def add_dork(self, date_added, dork, categ, author):
        self.date_added=date_added
        self.dork=dork
        self.categ=categ
        self.author=author
        dork_sha256 = hashlib.sha256(dork.encode()).hexdigest()
        dork_escaped = dork.replace("'", "''")
        categ_escaped = categ.replace("'", "''")
        author_escaped = author.replace("'", "''")

        try:
            query = f"INSERT INTO Dorks VALUES('{dork_sha256}', '{date_added}', '{dork_escaped}', '{categ_escaped}', '{author_escaped}')"
            self.cursor.execute(query)
        except sqlite3.Error as e:
            logging.error('ERROR: Database error when inserting {}: {}'.format(dork, e))
            return False
        except Exception as e:
            logging.error('ERROR: {}'.format(e))
            return False


        self.connection.commit()
        return True


    def lookup_dork(self, keyword):
        """
        Search for dorks in the database that match the keyword
        """
        try:
            query = f"SELECT dork FROM Dorks WHERE dork LIKE '%{keyword}%'"
            self.cursor.execute(query)
            results = self.cursor.fetchall()
            dorks = [result[0] for result in results]
            return dorks
        except sqlite3.Error as e:
            logging.error('ERROR: Database error when searching for {}: {}'.format(keyword, e))
            return ['esti prost']
        except Exception as e:
            logging.error('ERROR: {}'.format(e))
            return ['esti prost x2']


def display_dorks(results):
    """
    Display dorks
    """
    # TODO: Add multiple options
    pp = pprint.PrettyPrinter(indent=4)
    pp.pprint(results)


database = DB()
headers = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:87.0) Gecko/20100101 Firefox/87.0", "Accept": "application/json, text/javascript, /; q=0.01", "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate", "Referer": "https://www.exploit-db.com/google-hacking-database", "X-Requested-With": "XMLHttpRequest", "Connection": "close"}
url = "https://www.exploit-db.com/google-hacking-database"

def get_dorks():
    #GET the dorks from the website
    sender = requests.get(url, headers=headers)
    recordsFiltered = sender.json()['recordsFiltered']

    for x in range(recordsFiltered):
        dorks = sender.json()['data'][x]['url_title']
        dorkdate = sender.json()['data'][x]['date']
        dorkcateg = sender.json()['data'][x]['category']['cat_title']
        dorkauthor = sender.json()['data'][x]['author']['name']
        stripTag = re.sub("<.*?>",' ',dorks)
        print(f"DORK :  {dorkdate}  {stripTag}  {dorkcateg}  {dorkauthor}")
        print("Inserting into DB")
        database.add_dork(dorkdate, stripTag, dorkcateg, dorkauthor)
        print(" ")


def main(download, lookup, search, db_file):
    database = DB(db_file)

    if database.is_database_file() == False:
        database.create_new_database()

    database.get_database_connection()

    if download:
        get_dorks()
        print("Downloading dorks from ExploitDB")

    if lookup or search:
        database = DB()
        keyword = input("Please insert keyword ")
        results = database.lookup_dork(keyword)
        display_dorks(results)

        if search:
            #TODO implement google search
            print("Searching Dorks on Google")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Google Hacking Database Scraper and Lookup tool')
    options = parser.add_mutually_exclusive_group()
    options.add_argument('-d', '--download', action='store_true', help='Download dorks from ExploitDB')
    options.add_argument('-l', '--lookup', type=str, help='Lookup specific Dorks in the local DB')

    parser.add_argument('-s', '--search', type=str, help='Search on Google using matching Dorks')
    parser.add_argument('-db', '--database', type=str, default='ghdb.db',
                        help='Specify database name. Default="ghdb.db"')
    parser.add_argument('--debug', action='store_true',
                        help='This argument enables DEBUG logging without modifying the script.')

    args = parser.parse_args()

    log_filename = 'ghdb.log'
    if args.database != 'ghdb.db':
        log_filename = 'ghdb%s.log' % os.path.basename(args.database).split('.')[0]

    log_path = os.path.join(os.getcwd(), log_filename)
    print(f'For any issues read the log: "tail -F {log_path}"')

    logFormat = "%(asctime)s:%(levelname)s:%(threadName)s:%(funcName)s:%(lineno)d: %(message)s"
    logging.basicConfig(level=logging.DEBUG if args.debug else logging.ERROR, filename=log_path, format=logFormat)

    logging.info('Welcome to GHDB Scraper. Starting magic...')
    logging.info('Passed arguments: {}'.format(args))

    main(args.download, args.lookup, args.search, args.database)
